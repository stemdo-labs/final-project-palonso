name: Run Ansible Playbooks

on:
  workflow_dispatch:

jobs:
  run-ansible:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Add Backup VM to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.IP_PUBLIC_VM_BACKUP }} >> ~/.ssh/known_hosts

      - name: Install Ansible on Backup VM
        run: |
          sshpass -p 'P@ssw0rd2023!' ssh -o StrictHostKeyChecking=no adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }} 'sudo apt-get update && sudo apt-get install -y ansible'

      - name: Copy SSH Key to Backup VM
        run: |
          sshpass -p 'P@ssw0rd2023!' scp -o StrictHostKeyChecking=no ~/.ssh/id_rsa adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }}:/home/adminuser2/.ssh/id_rsa

      - name: Set Permissions on Backup VM
        run: |
          sshpass -p 'P@ssw0rd2023!' ssh -o StrictHostKeyChecking=no adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }} 'chmod 600 ~/.ssh/id_rsa'

      - name: Copy public key to DB VM
        run: |
          sshpass -p 'P@ssw0rd2023!' ssh -o StrictHostKeyChecking=no adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }} "sshpass -p 'P@ssw0rd2023!' ssh -o StrictHostKeyChecking=no adminuser@10.0.26.4 'mkdir -p ~/.ssh && echo \"$(cat ~/.ssh/id_rsa.pub)\" >> ~/.ssh/authorized_keys'"

      - name: Verify SSH connectivity from Backup VM to DB VM

      - name: Get Public IP of VM
        id: get-ip
        run: |
          sshpass -p 'P@ssw0rd2023!' ssh -o StrictHostKeyChecking=no adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }} 'ssh -o StrictHostKeyChecking=no adminuser@10.0.26.4 echo "SSH connectivity is working"'

      - name: Remove existing ansible folder on Backup VM
        run: |
          sshpass -p 'P@ssw0rd2023!' ssh -o StrictHostKeyChecking=no adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }} '[ -d /home/adminuser2/ansible ] && rm -rf /home/adminuser2/ansible || echo "Directory does not exist"'

      - name: Copy Playbooks to Backup VM
        run: |
          sshpass -p 'P@ssw0rd2023!' scp -o StrictHostKeyChecking=no -r ./ansible adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }}:/home/adminuser2/ansible

      - name: Run Setup DB Playbook
        run: |
          sshpass -p 'P@ssw0rd2023!' ssh -o StrictHostKeyChecking=no adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }} 'ansible-playbook -i /home/adminuser2/ansible/inventory.ini /home/adminuser2/ansible/setup_db.yaml'

      - name: Seed the Database
        run: |
          sshpass -p 'P@ssw0rd2023!' ssh -o StrictHostKeyChecking=no adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }} 'ansible-playbook -i /home/adminuser2/ansible/inventory.ini /home/adminuser2/ansible/seed_db.yaml'

      - name: Run Backup Playbook
        env:
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        run: |
          sshpass -p 'P@ssw0rd2023!' ssh -o StrictHostKeyChecking=no adminuser2@${{ secrets.IP_PUBLIC_VM_BACKUP }} 'ansible-playbook -i /home/adminuser2/ansible/inventory.ini /home/adminuser2/ansible/backup_db.yaml -e "azure_storage_key=${AZURE_STORAGE_KEY}"'
